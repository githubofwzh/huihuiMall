package com.kshl.huihuimall.console.controller.account;

import com.kshl.huihuimall.base.request.AccountMgmtRequest;
import com.kshl.base.response.BasePageResponse;
import com.kshl.base.response.BaseResponse;
import com.kshl.base.response.ResponseBuilder;
import com.kshl.huihuimall.base.dal.entity.KsAccount;
import com.kshl.huihuimall.base.dal.entity.extendsEntity.KsAccountAndRole;
import com.kshl.huihuimall.console.controller.account.pojo.SimpleAccount;
import com.kshl.huihuimall.console.service.account.AccountService;
import com.kshl.security.model.KSUserDetailHelper;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import java.util.Date;
import java.util.List;

import static com.kshl.huihuimall.console.CSErrorCode.*;
@Controller
@EnableAutoConfiguration
@RequestMapping("/accountMgmt")
public class AccountMgmtController {

    private static Logger logger = LoggerFactory.getLogger(AccountMgmtController.class);
    @Autowired
    private AccountService accountService;

   /* @RequestMapping(value = "/queryAccounts", method = {RequestMethod.GET, RequestMethod.POST})
    @ResponseBody
    public BasePageResponse getAccounts(AccountMgmtRequest request) {
        String entCode = KSUserDetailHelper.getUserEntCode();
        List<KsAccountAndRole> accounts = accountService.getAllAccounts(request.getPageNum(), request.getPageSize(),
                entCode, request.getAccount(), request.getName(), request.getPhone());
        BasePageResponse<List<KsAccountAndRole>> pageResponse = ResponseBuilder.buildBasePageResponse(SUCCESS);
        pageResponse.setData(accounts);
        return pageResponse;
    }*

    /**
     * 后台账户管理分页查询
     * @param request
     * @return
     */
    @RequestMapping(value = "/queryAccounts", method = {RequestMethod.GET, RequestMethod.POST})
    @ResponseBody
    public BasePageResponse queryAccounts(AccountMgmtRequest request) {
        logger.debug("queryAccounts start");
        //只查询未删除的数据
        request.setIsDeleted(0);
        //只查询type=1的账户
        request.setType(1);
        return accountService.queryAccounts(request);
    }

    /**
     * 后台账户管理分页查询
     * @param name
     * @return
     */
    @RequestMapping(value = "/queryStorageManagers", method = {RequestMethod.GET})
    @ResponseBody
    public BasePageResponse queryStorageManagers(String name) {
        List< SimpleAccount >simpleAccounts =  accountService.queryStorageManagers(name);
        BasePageResponse response = ResponseBuilder.buildBasePageResponse(SUCCESS);
        response.setData(simpleAccounts);
        return response;
    }

  /*  @RequestMapping(value = "/addAccount", method = {RequestMethod.GET, RequestMethod.POST})
    @ResponseBody
    public BaseResponse addAccount(KsAccountAndRole account) {
        String entCode = KSUserDetailHelper.getUserEntCode();
        account.setMerchantCode(entCode);
        account.setCreateTime(new Date());
        boolean isSuccess = accountService.addAcount(account) > 0;
        BaseResponse response = ResponseBuilder.buildBaseResponse(isSuccess ? SUCCESS : INVALID_PARAM);
        return response;
    }*/

    /**
     * 添加一条账户信息
     * @param request
     * @param bindingResult
     * @return
     */
    @RequestMapping(value = "/addKsAccount", method = {RequestMethod.GET, RequestMethod.POST})
    @ResponseBody
    public BaseResponse addKsAccount(AccountMgmtRequest request,BindingResult bindingResult) {
        logger.debug("addKsAccount start");
        BaseResponse response;
        if (bindingResult.hasErrors()) {
            logger.warn("[AccountMgmtRequest] param error = {}", bindingResult.getAllErrors());
            response = ResponseBuilder.buildBaseResponse(INVALID_PARAM);
        } else {
            response = accountService.addKsAccount(request);
        }
        return response;

    }




    /*@RequestMapping(value = "/updateAccount", method = {RequestMethod.GET, RequestMethod.POST})
    @ResponseBody
    public BaseResponse updateAccount(KsAccountAndRole account) {
        String entCode = KSUserDetailHelper.getUserEntCode();
        account.setMerchantCode(entCode);
        account.setModifyTime(new Date());
        int count = accountService.updateAccount(account);
        BaseResponse response = ResponseBuilder.buildBaseResponse(count > 0 ? SUCCESS : INVALID_PARAM);
        return response;
    }*/

    /**
     * 修改账户信息（后台账户）
     * @param request
     * @return
     */
    @RequestMapping(value = "/updateKsAccount", method = {RequestMethod.GET, RequestMethod.POST})
    @ResponseBody
    public BaseResponse updateKsAccount(AccountMgmtRequest request) {
        logger.debug("updateKsAccount start");
        BaseResponse response;
        if (request.getId() == null) {
            logger.warn("[AccountMgmtRequest] param error id can not be null");
            response = ResponseBuilder.buildBaseResponse(INVALID_PARAM);
        } else {
            response = accountService.updateKsAccount(request);
        }
        return response;
    }




    @RequestMapping(value = "/view")
    @ResponseBody
    public ModelMap view(Integer id) {
        ModelMap result = new ModelMap();
        KsAccountAndRole account = accountService.getById(id);
        result.put("data", account);
        return result;
    }

    @RequestMapping(value = "/accountIsExits")
    @ResponseBody
    public ModelMap getByAccount(String loginAccount) {
        //String entCode = KSUserDetailHelper.getUserEntCode();
        List<KsAccount> ksAccount = accountService.getByAccount(loginAccount);
        ModelMap result = new ModelMap();
        result.put("data", ksAccount);
        return result;
    }


}
