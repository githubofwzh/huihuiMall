package com.kshl.huihuimall.base.service.product.impl;

import com.kshl.base.reqeust.BasePageRequest;
import com.kshl.base.response.BasePageResponse;
import com.kshl.base.response.BaseResponse;
import com.kshl.base.response.ResponseBuilder;
import com.kshl.huihuimall.base.constants.Constants;
import com.kshl.huihuimall.base.dal.dao.ProductDao;
import com.kshl.huihuimall.base.dal.entity.*;
import com.kshl.huihuimall.base.service.product.ProductService;
import com.kshl.huihuimall.console.base.pojo.CategoryPojo;
import com.kshl.huihuimall.console.base.pojo.CategoryToBrandPojo;
import com.kshl.huihuimall.console.base.pojo.ProductDetailPojo;
import com.kshl.huihuimall.console.controller.product.request.*;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import javax.servlet.http.HttpSession;
import java.util.*;
import static com.kshl.huihuimall.console.CSErrorCode.INVALID_PARAM;
import static com.kshl.huihuimall.console.CSErrorCode.SUCCESS;

@Service
public class ProductServiceImpl implements ProductService {


    @Autowired
    private ProductDao productDao;

    private static final String keyCategoryTwoToBrandList = "categoryTwoToBrandList";

    @Override
    public BasePageResponse getAllCategoryOne(CategoryOneRequest request) {
        List<CategoryOne> result = productDao.getAllCategoryOne(request.getPageSize(), request.getPageNum(), request.getName());
        BasePageResponse response = ResponseBuilder.buildBasePageResponse(SUCCESS);
        response.setData(result);
        return response;
    }

    /**
     * 分页查询二级分类
     *
     * @param request
     * @return
     */
    @Override
    public BasePageResponse getAllCategoryTwo(CategoryTwoRequest request) {
       /* List<CategoryTwo> result = productDao.getAllCategoryTwo(request.getPageSize(), request.getPageNum(), request.getName(), request.getParentId());
        BasePageResponse response = ResponseBuilder.buildBasePageResponse(SUCCESS);
        response.setData(result);
        return response;*/

        List<Map<String, Object>> result = productDao.getAllCategoryTwo(request.getPageSize(), request.getPageNum(), request.getName(), request.getParentId());
        int total = productDao.getAllCategoryTwoCount(request.getName(), request.getParentId());
        BasePageResponse<List<Map<String, Object>>> pageResponse = ResponseBuilder.buildBasePageResponse(SUCCESS);
        pageResponse.setData(result);
        pageResponse.setTotal(total);
        if (request.getPageNum() > 1) {
            pageResponse.setHasPreviousPage(true);
        }
        if (request.getPageSize() * request.getPageNum() >= total) {
            pageResponse.setHasNextPage(false);
        } else {
            pageResponse.setHasNextPage(true);
        }
        int count = total / request.getPageSize();
        pageResponse.setPages(total % request.getPageSize() == 0 ? count : count + 1);
        return pageResponse;
    }


    @Override
    public BasePageResponse getAllBrand(BrandRequest brandRequest) {
        List<Map<String, Object>> result = productDao.getAllBrand(brandRequest.getPageSize(), brandRequest.getPageNum(), brandRequest.getName(), brandRequest.getParentId());
        int total = productDao.getAllBrandCount(brandRequest.getName(), brandRequest.getParentId());
        BasePageResponse<List<Map<String, Object>>> pageResponse = ResponseBuilder.buildBasePageResponse(SUCCESS);
        pageResponse.setData(result);
        pageResponse.setTotal(total);
        if (brandRequest.getPageNum() > 1) {
            pageResponse.setHasPreviousPage(true);
        }
        if (brandRequest.getPageSize() * brandRequest.getPageNum() >= total) {
            pageResponse.setHasNextPage(false);
        } else {
            pageResponse.setHasNextPage(true);
        }
        int count = total / brandRequest.getPageSize();
        pageResponse.setPages(total % brandRequest.getPageSize() == 0 ? count : count + 1);
        return pageResponse;
    }

    @Override
    public BasePageResponse getAllProduct(ProductRequest productRequest) {
        List<Map<String, Object>> result = productDao.getAllProduct(productRequest.getPageSize(), productRequest.getPageNum(), productRequest.getName(), productRequest.getBrandId(), productRequest.getCategoryoneId(), productRequest.getCategorytwoId(), productRequest.getShelvesStatus(), productRequest.getMerchantType(), productRequest.getMerchantId());
        int total = productDao.getAllProductCount(productRequest.getName(), productRequest.getBrandId(), productRequest.getCategoryoneId(), productRequest.getCategorytwoId(), productRequest.getShelvesStatus(), productRequest.getMerchantType(), productRequest.getMerchantId());
        BasePageResponse<List<Map<String, Object>>> pageResponse = ResponseBuilder.buildBasePageResponse(SUCCESS);
        pageResponse.setData(result);
        pageResponse.setTotal(total);
        if (productRequest.getPageNum() > 1) {
            pageResponse.setHasPreviousPage(true);
        }
        if (productRequest.getPageSize() * productRequest.getPageNum() >= total) {
            pageResponse.setHasNextPage(false);
        } else {
            pageResponse.setHasNextPage(true);
        }
        int count = total / productRequest.getPageSize();
        pageResponse.setPages(total % productRequest.getPageSize() == 0 ? count : count + 1);
        return pageResponse;
    }

    @Override
    public BasePageResponse getAllProductReview(ProductReviewRequest productReviewRequest) {
        List<Map<String, Object>> result = productDao.getAllProductReview(productReviewRequest.getPageSize(), productReviewRequest.getPageNum(), productReviewRequest.getName());
        int total = productDao.getAllProductReviewCount(productReviewRequest.getName());
        BasePageResponse<List<Map<String, Object>>> pageResponse = ResponseBuilder.buildBasePageResponse(SUCCESS);
        pageResponse.setData(result);
        pageResponse.setTotal(total);
        if (productReviewRequest.getPageNum() > 1) {
            pageResponse.setHasPreviousPage(true);
        }
        if (productReviewRequest.getPageSize() * productReviewRequest.getPageNum() >= total) {
            pageResponse.setHasNextPage(false);
        } else {
            pageResponse.setHasNextPage(true);
        }
        int count = total / productReviewRequest.getPageSize();
        pageResponse.setPages(total % productReviewRequest.getPageSize() == 0 ? count : count + 1);
        return pageResponse;
    }

    @Override
    public BasePageResponse getAllCategoryTwoToBrand(Integer brandId, HttpSession session) {
        List<Map<String, Object>> result = productDao.getAllCategoryTwoToBrand(brandId);
        session.setAttribute(keyCategoryTwoToBrandList, result);
        BasePageResponse response = ResponseBuilder.buildBasePageResponse(SUCCESS);
        response.setData(result);
        return response;
    }


    @Override
    public BaseResponse addCategoryOne(CategoryOneRequest request) {
        BaseResponse response;
        CategoryOne record = new CategoryOne();
        record.setName(request.getName());
        record.setSort(request.getSort());
        int add = productDao.addCategoryOne(record);
        if (add > 0) {
            response = ResponseBuilder.buildBaseResponse(SUCCESS);
        } else {
            response = ResponseBuilder.buildBaseResponse(INVALID_PARAM);
        }
        return response;
    }

    @Override
    public BaseResponse addCategoryTwo(CategoryTwoRequest request) {
        BaseResponse response;
        CategoryTwo record = new CategoryTwo();
        record.setName(request.getName());
        record.setParentId(request.getParentId());
        record.setSort(request.getSort());
        record.setImage(request.getImage());
        int add = productDao.addCategoryTwo(record);
        if (add > 0) {
            response = ResponseBuilder.buildBaseResponse(SUCCESS);
        } else {
            response = ResponseBuilder.buildBaseResponse(INVALID_PARAM);
        }
        return response;
    }

    /**
     * 添加品牌
     * @param request
     * @return
     */
    @Override
    public BaseResponse addBrand(BrandRequest request) {
        BaseResponse response;
        Brand brand = new Brand();
        BeanUtils.copyProperties(request, brand);
        int inseret = productDao.addBrand(brand);
        if (inseret > 0) {
            response = ResponseBuilder.buildBaseResponse(SUCCESS);
        } else {
            response = ResponseBuilder.buildBaseResponse(INVALID_PARAM);
        }
        return response;
    }

    @Override
    public BaseResponse addProduct(ProductRequest request) {
        BaseResponse response;
        Product record = new Product();
        BeanUtils.copyProperties(request, record);
        int add = productDao.addProduct(record);
        if (add > 0) {
            response = ResponseBuilder.buildBaseResponse(SUCCESS);
        } else {
            response = ResponseBuilder.buildBaseResponse(INVALID_PARAM);
        }
        return response;
    }

    @Override
    public BaseResponse addCategoryTwoToBrand(String categorytwoname, Integer categorytwoid, HttpSession session) {
        List<Map<String, Object>> list = (List<Map<String, Object>>) session.getAttribute(keyCategoryTwoToBrandList);
        if (list == null) {
            list = new ArrayList<Map<String, Object>>();
        }
        addFilterCategoryTwoToBrand(list, categorytwoname, categorytwoid);
        session.setAttribute(keyCategoryTwoToBrandList, list);
        return ResponseBuilder.buildBaseResponse(SUCCESS);
    }

    private void addFilterCategoryTwoToBrand(List<Map<String, Object>> list, String categorytwoname, Integer categorytwoid) {
        boolean isFilter = false;
        for (Map<String, Object> map : list) {
            if (categorytwoname.equals(map.get("categorytwoname")) && categorytwoid == map.get("categorytwoid")) {
                isFilter = true;
                return;
            }
        }
        if (!isFilter) {
            Map<String, Object> map = new HashMap<String, Object>();
            map.put("categorytwoname", categorytwoname);
            map.put("categorytwoid", categorytwoid);
            list.add(map);
        }
    }

    @Override
    public BaseResponse updateCategoryOne(CategoryOneRequest request) {
        BaseResponse response;
        CategoryOne record = new CategoryOne();
        record.setId(request.getId());
        record.setName(request.getName());
        record.setSort(request.getSort());
        int update = productDao.updateCategoryOne(record);
        if (update > 0) {
            response = ResponseBuilder.buildBaseResponse(SUCCESS);
        } else {
            response = ResponseBuilder.buildBaseResponse(INVALID_PARAM);
        }
        return response;
    }

    @Override
    public BaseResponse updateCategoryTwo(CategoryTwoRequest request) {
        BaseResponse response;
        CategoryTwo record = new CategoryTwo();
        record.setId(request.getId());
        record.setName(request.getName());
        record.setParentId(request.getParentId());
        record.setSort(request.getSort());
        record.setImage(request.getImage());
        int update = productDao.updateCategoryTwo(record);
        if (update > 0) {
            response = ResponseBuilder.buildBaseResponse(SUCCESS);
        } else {
            response = ResponseBuilder.buildBaseResponse(INVALID_PARAM);
        }
        return response;
    }

    /**
     * 更新品牌信息
     * @param request
     * @return
     */
    @Override
    public BaseResponse updateBrand(BrandRequest request) {
        BaseResponse response;
        Brand brand = new Brand();
        BeanUtils.copyProperties(request, brand);
        int update = productDao.updateBrand(brand);
        if (update > 0) {
            response = ResponseBuilder.buildBaseResponse(SUCCESS);
        } else {
            response = ResponseBuilder.buildBaseResponse(INVALID_PARAM);
        }
        return response;
    }

    @Override
    public BaseResponse updateProduct(ProductRequest request) {
        BaseResponse response;
        Product record = new Product();
        BeanUtils.copyProperties(request, record);
        int update = productDao.updateProduct(record);
        if (update > 0) {
            response = ResponseBuilder.buildBaseResponse(SUCCESS);
        } else {
            response = ResponseBuilder.buildBaseResponse(INVALID_PARAM);
        }
        return response;
    }

    @Override
    public BaseResponse deleteCategoryOne(CategoryOneRequest request) {
        BaseResponse response;
        int delete = productDao.deleteCategoryOne(request.getId());
        if (delete > 0) {
            response = ResponseBuilder.buildBaseResponse(SUCCESS);
        } else {
            response = ResponseBuilder.buildBaseResponse(INVALID_PARAM);
        }
        return response;
    }

    @Override
    public BaseResponse deleteCategoryTwo(CategoryTwoRequest request) {
        BaseResponse response;
        int delete = productDao.deleteCategoryTwo(request.getId());
        if (delete > 0) {
            response = ResponseBuilder.buildBaseResponse(SUCCESS);
        } else {
            response = ResponseBuilder.buildBaseResponse(INVALID_PARAM);
        }
        return response;
    }


    @Override
    public BaseResponse deleteBrand(BrandRequest request) {
        BaseResponse response;
        int delete = productDao.deleteBrand(request.getId());
        if (delete > 0) {
            response = ResponseBuilder.buildBaseResponse(SUCCESS);
        } else {
            response = ResponseBuilder.buildBaseResponse(INVALID_PARAM);
        }
        return response;
    }

    @Override
    public BaseResponse deleteProduct(ProductRequest request) {
        BaseResponse response;
        int delete = productDao.deleteProduct(request.getId());
        if (delete > 0) {
            response = ResponseBuilder.buildBaseResponse(SUCCESS);
        } else {
            response = ResponseBuilder.buildBaseResponse(INVALID_PARAM);
        }
        return response;
    }

    @Override
    public BaseResponse deleteCategoryTwoToBrand(String categorytwoname, Integer categorytwoid, HttpSession session) {
        List<Map<String, Object>> list = (List<Map<String, Object>>) session.getAttribute(keyCategoryTwoToBrandList);
        if (list == null) {
            list = new ArrayList<Map<String, Object>>();
        }

        Iterator<Map<String, Object>> it = list.iterator();
        while (it.hasNext()) {
            Map<String, Object> map = it.next();
            if (categorytwoid == map.get("categorytwoid")) {
                it.remove();
                break;
            }
        }

        session.setAttribute(keyCategoryTwoToBrandList, list);
        return ResponseBuilder.buildBaseResponse(SUCCESS);
    }

    @Override
    public BaseResponse passProductReview(ProductReviewRequest request) {
        BaseResponse response;
        int delete = productDao.deleteProductReview(request.getId());
        if (delete > 0) {
            Product record = new Product();
            record.setId(request.getProductId());
            record.setShelvesStatus(Constants.SHELVES_STATUS_TYPE.ON_THE_SHELF);
            record.setReviewStatus(Constants.REVIEW_STATUS_TYPE.PASS_REVIEW);
            int update = productDao.updateProduct(record);
            if (update > 0) {
                response = ResponseBuilder.buildBaseResponse(SUCCESS);
            } else {
                response = ResponseBuilder.buildBaseResponse(INVALID_PARAM);
            }
        } else {
            response = ResponseBuilder.buildBaseResponse(INVALID_PARAM);
        }
        return response;
    }

    @Override
    public BaseResponse unPassProductReview(ProductReviewRequest request) {
        BaseResponse response;
        int delete = productDao.deleteProductReview(request.getId());
        if (delete > 0) {
            Product record = new Product();
            record.setId(request.getProductId());
            record.setShelvesStatus(Constants.SHELVES_STATUS_TYPE.NOT_ON_THE_SHELF);
            record.setReviewStatus(Constants.REVIEW_STATUS_TYPE.UNPASS_REVIEW);
            int update = productDao.updateProduct(record);
            if (update > 0) {
                response = ResponseBuilder.buildBaseResponse(SUCCESS);
            } else {
                response = ResponseBuilder.buildBaseResponse(INVALID_PARAM);
            }
        } else {
            response = ResponseBuilder.buildBaseResponse(INVALID_PARAM);
        }
        return response;
    }

    @Override
    public BaseResponse putOnTheShelfSelf(ProductRequest request) {
        BaseResponse response;
        Product record = new Product();
        record.setId(request.getId());
        record.setShelvesStatus(Constants.SHELVES_STATUS_TYPE.ON_THE_SHELF);
        int update = productDao.updateProduct(record);
        if (update > 0) {
            response = ResponseBuilder.buildBaseResponse(SUCCESS);
        } else {
            response = ResponseBuilder.buildBaseResponse(INVALID_PARAM);
        }
        return response;
    }

    @Override
    public BaseResponse putOnTheShelfThird(ProductRequest request) {
        BaseResponse response;
        ProductReview record = new ProductReview();
        record.setProductId(request.getId());
        record.setTime(new Date());
        int add = productDao.addProductReview(record);
        if (add > 0) {
            response = ResponseBuilder.buildBaseResponse(SUCCESS);
        } else {
            response = ResponseBuilder.buildBaseResponse(INVALID_PARAM);
        }
        return response;
    }

    @Override
    public BaseResponse putOffTheShelf(ProductRequest request) {
        BaseResponse response;
        Product record = new Product();
        record.setId(request.getId());
        record.setShelvesStatus(Constants.SHELVES_STATUS_TYPE.OFF_THE_SHELF);
        int update = productDao.updateProduct(record);
        if (update > 0) {
            response = ResponseBuilder.buildBaseResponse(SUCCESS);
        } else {
            response = ResponseBuilder.buildBaseResponse(INVALID_PARAM);
        }
        return response;
    }

    /**
     * 根据id查询一级分类详情
     *
     * @param id
     * @return
     */
    @Override
    public BaseResponse getCategoryOneDetail(Integer id) {
        BaseResponse response;
        CategoryOne categoryOne = productDao.getCategoryOneDetail(id);
        if (categoryOne != null) {
            response = ResponseBuilder.buildBaseResponse(SUCCESS);
            response.setData(categoryOne);
        } else {
            response = ResponseBuilder.buildBaseResponse(INVALID_PARAM);
        }
        return response;
    }

    /**
     * 查询所有一级分类（不分页）
     *
     * @return
     */
    @Override
    public BaseResponse getCategoryOneList() {
        BaseResponse response;
        List<CategoryOne> list = productDao.getCategoryOneList();
        if (list != null && list.size() > 0) {
            response = ResponseBuilder.buildBaseResponse(SUCCESS);
            response.setData(list);
        } else {
            response = ResponseBuilder.buildBaseResponse(INVALID_PARAM);
        }
        return response;
    }

    /**
     * 根据二级分类Id查询一级二级分类信息
     *
     * @param id
     * @return
     */
    @Override
    public BaseResponse getCategoryDetailById(Integer id) {
        BaseResponse response;
        CategoryTwo categoryTwo = productDao.getCategoryTwoById(id);
            CategoryOne categoryOne = productDao.getCategoryOneDetail(categoryTwo.getParentId());
            if (categoryOne != null) {
                CategoryPojo categoryPojo = new CategoryPojo();
                categoryPojo.setCategoryOne(categoryOne);
                categoryPojo.setCategoryTwo(categoryTwo);
                response = ResponseBuilder.buildBaseResponse(SUCCESS);
                response.setData(categoryPojo);
            } else {
                response = ResponseBuilder.buildBaseResponse(INVALID_PARAM);
            }
         return response;
    }

    /**
     * 查询所有二级分类（不分页）
     * @return
     */
    @Override
    public BaseResponse getCategoryTwoList() {
        BaseResponse response;
        List<CategoryTwo> list = productDao.getCategoryTwoList();
        if (list != null && list.size() > 0) {
            response = ResponseBuilder.buildBaseResponse(SUCCESS);
            response.setData(list);
        } else {
            response = ResponseBuilder.buildBaseResponse(INVALID_PARAM);
        }
        return response;
    }

    /**
     * 根据parentId查询一级分类
     * @param parentId
     * @return
     */
    @Override
    public BaseResponse getCategoryTwoListByPId(Integer parentId) {
        BaseResponse response;
        List<CategoryTwo> list = productDao.getCategoryTwoListByPId(parentId);
        if (list != null) {
            if(list.size()>0) {
                response = ResponseBuilder.buildBaseResponse(SUCCESS);
                response.setData(list);
            }else {
                response = ResponseBuilder.buildBaseResponse(SUCCESS);
                response.setData(list);
            }
        } else {
            response = ResponseBuilder.buildBaseResponse(INVALID_PARAM);
        }
        return response;
    }

    /**
     * 根据品牌id查详情
     * @param id
     * @return
     */
    @Override
    public BaseResponse getBrandById(Integer id) {
        BaseResponse response;
        Brand brand = productDao.getBrandById(id);
        if (brand != null) {
            response = ResponseBuilder.buildBaseResponse(SUCCESS);
            response.setData(brand);
        } else {
            response = ResponseBuilder.buildBaseResponse(INVALID_PARAM);
        }
        return response;
    }

    /**
     * 根据品牌id查询所有的二级分类
     * @param id
     * @return
     */
    @Override
    public BaseResponse getCTwoByBrandId(Integer id) {
        BaseResponse response;
        List<CategoryToBrand> list = productDao.getCTwoByBrandId(id);
        if (list != null && list.size() > 0) {
            response = ResponseBuilder.buildBaseResponse(SUCCESS);
            response.setData(list);
        } else {
            response = ResponseBuilder.buildBaseResponse(INVALID_PARAM);
        }
        return response;
    }

    /**
     * 保存
     * @param id
     * @param objs
     * @return
     */
    @Override
    public BaseResponse addCategoryToBrand(String id, Object[] objs) {
        BaseResponse response;
        int brandId = Integer.parseInt(id);
        int delete = productDao.deleteCToBrandByBrandId(brandId);
        CategoryToBrand categoryToBrand = new CategoryToBrand();
        if (delete >= 0) {
            for (int i=0;i<objs.length;i++){
                int  categoryTwoId= Integer.parseInt(objs[i].toString());
                categoryToBrand.setBrandId(brandId);
                categoryToBrand.setCategoryTwoId(categoryTwoId);
                int inseret = productDao.addCategoryToBrand(categoryToBrand);
            }
            response = ResponseBuilder.buildBaseResponse(SUCCESS);
        } else {
            response = ResponseBuilder.buildBaseResponse(INVALID_PARAM);
        }
        return response;
    }

    @Override
    public int putOnTheShelfSelf(Product product) {
        return productDao.putOnTheShelfSelf(product);
    }

    @Override
    public int putOnTheShelfThird(Product product) {
        return productDao.putOnTheShelfThird(product);
    }

    @Override
    public int putOffTheShelf(Product product) {
        return productDao.putOffTheShelf(product);
    }

    @Override
    public int productdeleteByPrimaryKey(Integer id) {
        return productDao.productdeleteByPrimaryKey(id);
    }

    @Override
    public int productinsert(Product record) {
        return productDao.productinsert(record);
    }


    @Override
    public int productupdateByPrimaryKey(Product record) {
        return productDao.productupdateByPrimaryKey(record);
    }

    /**
     * 根据二级分类id查询品牌信息
     * @param id
     * @return
     */
    @Override
    public BaseResponse getBrandByCTId(Integer id) {
        BaseResponse response;
        List<CategoryToBrandPojo> list = productDao.getBrandByCTId(id);
        if (list != null) {
            response = ResponseBuilder.buildBaseResponse(SUCCESS);
            response.setData(list);
        } else {
            response = ResponseBuilder.buildBaseResponse(INVALID_PARAM);
        }
        return response;
    }

    @Override
    public List<Map<String, Object>> ProductDetailById(Integer id) {
        return productDao.ProductDetailById(id);
    }

    /**
     * 根据商品编码查看商品信息
     * @param code
     * @return
     */
    @Override
    public BaseResponse getProductByCode(String code) {
        BaseResponse response;
        Product product= productDao.getProductByCode(code);
        if (product != null) {
            response = ResponseBuilder.buildBaseResponse(SUCCESS);
            response.setData(product);
        } else {
            response = ResponseBuilder.buildBaseResponse(INVALID_PARAM);
        }
        return response;
    }

    @Override
    public BasePageResponse getThirdPartyProduct(ProductRequest productRequest) {
        List<Map<String, Object>> result = productDao.getThirdPartyProduct(productRequest.getPageSize(), productRequest.getPageNum(),productRequest.getAccountId(), productRequest.getName(), productRequest.getShelvesStatus(), productRequest.getReviewStatus());
        int total = productDao.getThirdPartyProductCount(productRequest.getName(), productRequest.getAccountId(),productRequest.getShelvesStatus(), productRequest.getReviewStatus());
        BasePageResponse<List<Map<String, Object>>> pageResponse = ResponseBuilder.buildBasePageResponse(SUCCESS);
        pageResponse.setData(result);
        pageResponse.setTotal(total);
        if (productRequest.getPageNum() > 1) {
            pageResponse.setHasPreviousPage(true);
        }
        if (productRequest.getPageSize() * productRequest.getPageNum() >= total) {
            pageResponse.setHasNextPage(false);
        } else {
            pageResponse.setHasNextPage(true);
        }
        int count = total / productRequest.getPageSize();
        pageResponse.setPages(total % productRequest.getPageSize() == 0 ? count : count + 1);
        return pageResponse;
    }

    @Override
    public int selfServiceReview(Product product) {
        return productDao.selfServiceReview(product);
    }

    @Override
    public BasePageResponse getselfServiceReviewProduct(ProductRequest productRequest) {
        List<Map<String, Object>> result = productDao.getselfServiceReviewProduct(productRequest.getPageSize(), productRequest.getPageNum(), productRequest.getMername());
        int total = productDao.getselfServiceReviewProductCount(productRequest.getName());
        BasePageResponse<List<Map<String, Object>>> pageResponse = ResponseBuilder.buildBasePageResponse(SUCCESS);
        pageResponse.setData(result);
        pageResponse.setTotal(total);
        if (productRequest.getPageNum() > 1) {
            pageResponse.setHasPreviousPage(true);
        }
        if (productRequest.getPageSize() * productRequest.getPageNum() >= total) {
            pageResponse.setHasNextPage(false);
        } else {
            pageResponse.setHasNextPage(true);
        }
        int count = total / productRequest.getPageSize();
        pageResponse.setPages(total % productRequest.getPageSize() == 0 ? count : count + 1);
        return pageResponse;
    }

    @Override
    public Product getPrductPrices(String code) {
        return productDao.getPrductPrices(code);
    }
}
