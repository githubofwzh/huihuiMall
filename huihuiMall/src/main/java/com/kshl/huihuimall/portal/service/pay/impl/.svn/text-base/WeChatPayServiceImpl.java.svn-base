package com.kshl.huihuimall.portal.service.pay.impl;

import com.google.zxing.BarcodeFormat;
import com.google.zxing.EncodeHintType;
import com.google.zxing.MultiFormatWriter;
import com.google.zxing.WriterException;
import com.google.zxing.client.j2se.MatrixToImageWriter;
import com.google.zxing.common.BitMatrix;
import com.google.zxing.qrcode.decoder.ErrorCorrectionLevel;
import com.kshl.base.common.utils.FileUploadUtil;
import com.kshl.base.common.utils.KSHLUtils;
import com.kshl.base.common.utils.KSStringUtils;
import com.kshl.base.response.BaseResponse;
import com.kshl.base.response.ResponseBuilder;
import com.kshl.huihuimall.base.constants.Constants;
import com.kshl.huihuimall.base.constants.WeChatPayConstants;
import com.kshl.huihuimall.base.dal.entity.Payinfo;
import com.kshl.huihuimall.base.request.*;
import com.kshl.huihuimall.base.utils.DateFormatUtil;
import com.kshl.huihuimall.base.utils.WeChatPayUtil;
import com.kshl.huihuimall.portal.controller.UserInfo;
import com.kshl.huihuimall.portal.dal.dao.PayDao;
import com.kshl.huihuimall.portal.service.pay.WeChatPayService;
import com.kshl.util.*;
import net.sf.json.JSONObject;
import org.apache.commons.collections.map.HashedMap;
import org.apache.http.HttpEntity;
import org.apache.http.client.methods.CloseableHttpResponse;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.conn.ssl.SSLConnectionSocketFactory;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.ssl.SSLContexts;
import org.apache.http.util.EntityUtils;
import org.dom4j.DocumentHelper;
import org.dom4j.io.SAXReader;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.input.SAXBuilder;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.xml.sax.InputSource;

import javax.net.ssl.SSLContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import java.io.*;
import java.net.URL;
import java.net.URLConnection;
import java.nio.file.Path;
import java.security.KeyStore;
import java.util.*;

import static com.kshl.huihuimall.portal.PTErrorCode.*;

/**
 * Created by 40513 on 2018/1/16.
 */
@Service
public class WeChatPayServiceImpl implements WeChatPayService {

    private static Logger logger = LoggerFactory.getLogger(WeChatPayServiceImpl.class);

    @Autowired
    private PayDao payDao;

    @Override
    public BaseResponse weChatPublicPay(WeChatPublicPayRequest weChatPublicPayRequest, HttpSession session, HttpServletRequest request, HttpServletResponse response) {
        BaseResponse baseResponse;
        /*------1.获取参数信息------- */
        //商户订单号
        String out_trade_no = weChatPublicPayRequest.getOrderNumber();
        //价格 money
        String money = weChatPublicPayRequest.getMoney().toString();
        //金额转化为分为单位
        String finalmoney = WeChatPayConstants.getMoney(money);

        Object openid = session.getAttribute("openid");

        /*------3.生成预支付订单需要的的package数据------- */
        //随机数
        String nonce_str = MD5Util.getRandomStringByLength(16);
        //订单生成的机器 IP
        String spbill_create_ip = request.getRemoteAddr();
        //交易类型 ：jsapi代表微信公众号支付
        String trade_type = "JSAPI";
        //这里notify_url是 微信处理完支付后的回调的应用系统接口url。
        String notify_url = "http://www.hhwd.com.cn/huihuimall/pay/weChatNotifyUrl";

        SortedMap<String, String> packageParams = new TreeMap<String, String>();
        packageParams.put("appid", WeChatPayConstants.GZHID);
        packageParams.put("mch_id", WeChatPayConstants.SHHID);
        packageParams.put("nonce_str",  nonce_str);
        packageParams.put("body", "fee");
        packageParams.put("out_trade_no", out_trade_no);
        packageParams.put("total_fee", finalmoney);
        packageParams.put("spbill_create_ip", spbill_create_ip);
        packageParams.put("notify_url", notify_url);
        packageParams.put("trade_type", trade_type);

        if(openid!=null){
            packageParams.put("openid", openid.toString());
        }

        /*------4.根据package数据生成预支付订单号的签名sign------- */
        RequestHandler reqHandler = new RequestHandler(request, response);
        reqHandler.init( WeChatPayConstants.GZHID,  WeChatPayConstants.GZHSecret,  WeChatPayConstants.GZHAPIKEY);
        String sign = reqHandler.createSign(packageParams);

	    /*------5.生成需要提交给统一支付接口https://api.mch.weixin.qq.com/pay/unifiedorder 的xml数据-------*/
        String xml = "<xml>" +
                "<appid>" + WeChatPayConstants.GZHID + "</appid>" +
                "<mch_id>" + WeChatPayConstants.SHHID + "</mch_id>" +
                "<nonce_str>" + nonce_str + "</nonce_str>" +
                "<sign>" + sign + "</sign>" +
                "<body><![CDATA[" + "fee" + "]]></body>" +
                "<out_trade_no>" + out_trade_no + "</out_trade_no>" +
                "<total_fee>" + finalmoney + "</total_fee>" +
                "<spbill_create_ip>" + spbill_create_ip + "</spbill_create_ip>" +
                "<notify_url>" + notify_url + "</notify_url>" +
                "<trade_type>" + trade_type + "</trade_type>" +
                "<openid>" + openid + "</openid>" +
                "</xml>";

        /*------6.调用统一支付接口https://api.mch.weixin.qq.com/pay/unifiedorder 生产预支付订单----------*/
        String createOrderURL = "https://api.mch.weixin.qq.com/pay/unifiedorder";
        String prepay_id = "";
        try {
            prepay_id = GetWxOrderno.getPayNo(createOrderURL, xml);
            if (prepay_id.equals("")) {
                baseResponse = ResponseBuilder.buildBaseResponse(WECHAT_PAY_FAILED_NOTSUPORTCARD);
                return baseResponse;
            }
        } catch (Exception e) {
            baseResponse = ResponseBuilder.buildBaseResponse(WECHAT_ORDERQUERY_FAILED_ORDERNOTEXIST);
            logger.error("统一支付接口获取预支付订单出错：", e);
            return baseResponse;
        }

        /*------7.将预支付订单的id和其他信息生成签名并一起返回到jsp页面 ------- */
        nonce_str = MD5Util.getRandomStringByLength(16);
        SortedMap<String, String> finalpackage = new TreeMap<String, String>();
        String timestamp = String.valueOf(System.currentTimeMillis() / 1000);
        String packages = "prepay_id=" + prepay_id;
        finalpackage.put("appId", WeChatPayConstants.GZHID);
        finalpackage.put("timeStamp", timestamp);
        finalpackage.put("nonceStr", nonce_str);
        finalpackage.put("package", packages);
        finalpackage.put("signType", "MD5");
        String finalsign = reqHandler.createSign(finalpackage);

        Map<String, String> mv = new HashedMap();
        mv.put("appid",  WeChatPayConstants.GZHID);
        mv.put("timeStamp", timestamp);
        mv.put("nonceStr", nonce_str);
        mv.put("packageValue", packages);
        mv.put("paySign", finalsign);
        mv.put("success","ok");

        Payinfo payInfo = new Payinfo();
        Object object = session.getAttribute("userInfo");
        if (!KSStringUtils.isEmpty(object)) {
            UserInfo userInfo = (UserInfo)object;
            payInfo.setUserid(userInfo.getUserId().toString());
            payInfo.setPhone(userInfo.getPhoneNumber());
        }
        payInfo.setBody("慧慧商品");
        payInfo.setOutTradeNo(out_trade_no);
        payInfo.setPaystatus(Constants.PAY_STATUS.NOT_PAY);
        payInfo.setPaytype(Constants.PAY_TYPE.WECHAT_PAY);
        payInfo.setMoney(weChatPublicPayRequest.getMoney());
        payInfo.setPaytime(new Date());
        payDao.addPayInfo(payInfo);

        baseResponse = ResponseBuilder.buildBaseResponse(SUCCESS);
        baseResponse.setData(mv);//将成功信息返回

        return baseResponse;
    }

    @Override
    public BaseResponse updatePayInfo(PayInfoRequest payInfoRequest) {
        BaseResponse response;
        Map payInfoMap = new HashedMap();
        payInfoMap.put("out_trade_no",payInfoRequest.getOrderNumber());
        payInfoMap.put("trade_no",payInfoRequest.getTransactionId());
        payInfoMap.put("paytype",payInfoRequest.getPaytype());
        payInfoMap.put("payStatus",Constants.PAY_STATUS.PAY);
        payDao.updatePayStatus(payInfoMap);
        response = ResponseBuilder.buildBaseResponse(SUCCESS);
        return response;
    }

    @Override
    public BaseResponse weChatPay(WeChatPayRequest weChatPayRequest) {
        BaseResponse response;
        Map<String, String> params = new TreeMap<String, String>();
        params.put("appid", weChatPayRequest.getAppID());
        params.put("mch_id", weChatPayRequest.getMchID());
        String nonce_str = WeChatPayUtil.getRandomStringByLength(16);
        params.put("nonce_str", nonce_str);
        params.put("body", weChatPayRequest.getProductName());
        params.put("out_trade_no", weChatPayRequest.getOrderNumber());
        params.put("total_fee", weChatPayRequest.getPrice().toString());
        params.put("spbill_create_ip", weChatPayRequest.getBillCreateIP());
        params.put("auth_code", weChatPayRequest.getAuthCode());
        String mchKey = weChatPayRequest.getMchKey();

        try {
            String sign = WeChatPayUtil.generateSignature(params, mchKey, WeChatPayConstants.SignType.MD5);
            params.put("sign", sign);
            String requestXML = WeChatPayUtil.mapToXml(params);
            String responseXml = postData("https://" + WeChatPayConstants.DOMAIN_API + WeChatPayConstants.MICROPAY_URL_SUFFIX,
                    requestXML, null);
            Map map = WeChatPayUtil.xmlToMap(responseXml);
            String returnCode = (String) map.get("return_code");
            String resultCode = (String) map.get("result_code");
            if ("SUCCESS".equals(returnCode) && "SUCCESS".equals(resultCode)) {
                Payinfo payInfo = new Payinfo();
                payInfo.setBody(weChatPayRequest.getProductName());
                payInfo.setOutTradeNo(weChatPayRequest.getOrderNumber());
                payInfo.setPaystatus(Constants.PAY_STATUS.NOT_PAY);
                payInfo.setPaytype(Constants.PAY_TYPE.WECHAT_PAY);
                payInfo.setMoney(weChatPayRequest.getPrice());
                payDao.addPayInfo(payInfo);
                response = ResponseBuilder.buildBaseResponse(SUCCESS);
                response.setData(map);//将成功信息返回
            } else {
                logger.warn("[WeChatPayServiceImpl]WeChatPay failed, out_trade_no is {}, return_code is {}, result_code is {}", weChatPayRequest.getOrderNumber(), returnCode, resultCode);
                if ("FAIL".equals(returnCode)) {
                    response = ResponseBuilder.buildBaseResponse(REQUEST_FAILED);
                } else {
                    String errorCode = (String) map.get("err_code");

                    if ("NOTENOUGH".equals(errorCode)) {//请收银员提示用户更换当前支付的卡，然后请收银员重新扫码。建议：商户系统返回给收银台的提示为“用户余额不足.提示用户换卡支付”
                        response = ResponseBuilder.buildBaseResponse(WECHAT_PAY_FAILED_NOTENOUGH);
                    } else if ("ORDERPAID".equals(errorCode)) {//请确认该订单号是否重复支付，如果是新单，请使用新订单号提交
                        response = ResponseBuilder.buildBaseResponse(WECHAT_PAY_FAILED_ORDERPAID);
                    } else if ("ORDERCLOSED".equals(errorCode)) {//商户订单号异常，请重新下单支付
                        response = ResponseBuilder.buildBaseResponse(WECHAT_PAY_FAILED_ORDERCLOSED);
                    } else if ("SYSTEMERROR".equals(errorCode)) {//请立即调用被扫订单结果查询API，查询当前订单状态，并根据订单的状态决定下一步的操作
                        response = ResponseBuilder.buildBaseResponse(WECHAT_PAY_FAILED_SYSTEMERROR);
                    } else if ("AUTHCODEEXPIRE".equals(errorCode)) {//请收银员提示用户，请用户在微信上刷新条码，然后请收银员重新扫码。 直接将错误展示给收银员
                        response = ResponseBuilder.buildBaseResponse(WECHAT_PAY_FAILED_AUTHCODEEXPIRE);
                    } else if ("NOTSUPORTCARD".equals(errorCode)) {//该卡不支持当前支付，提示用户换卡支付或绑新卡支付
                        response = ResponseBuilder.buildBaseResponse(WECHAT_PAY_FAILED_NOTSUPORTCARD);
                    } else if ("ORDERREVERSED".equals(errorCode)) {//当前订单状态为“订单已撤销”，请提示用户重新支付
                        response = ResponseBuilder.buildBaseResponse(WECHAT_PAY_FAILED_ORDERREVERSED);
                    } else if ("BANKERROR".equals(errorCode)) {//请立即调用被扫订单结果查询API，查询当前订单的不同状态，决定下一步的操作。
                        response = ResponseBuilder.buildBaseResponse(WECHAT_PAY_FAILED_LOGICERROR);
                    } else if ("USERPAYING".equals(errorCode)) {//等待5秒，然后调用被扫订单结果查询API，查询当前订单的不同状态，决定下一步的操作。
                        response = ResponseBuilder.buildBaseResponse(WECHAT_PAY_FAILED_LOGICERROR);//该笔交易因为业务规则要求，需要用户输入支付密码。
                    } else if ("AUTH_CODE_ERROR".equals(errorCode)) {//每个二维码仅限使用一次，请刷新再试
                        response = ResponseBuilder.buildBaseResponse(WECHAT_PAY_FAILED_AUTH_CODE_ERROR);
                    } else if ("AUTH_CODE_INVALID".equals(errorCode)) {//请扫描微信支付被扫条码/二维码
                        response = ResponseBuilder.buildBaseResponse(WECHAT_PAY_FAILED_AUTH_CODE_INVALID);
                    } else {
                        response = ResponseBuilder.buildBaseResponse(WECHAT_PAY_FAILED_LOGICERROR);
                    }
                }
            }
            return response;
        } catch (Exception e) {
            response = ResponseBuilder.buildBaseResponse(INVALID_PARAM);
            return response;
        }
    }

    @Override
    public BaseResponse weChatOrderQuery(WeChatOrderQueryRequest weChatOrderQueryRequest) {
        BaseResponse response;
        Map<String, String> params = new TreeMap<String, String>();
        params.put("appid", WeChatPayConstants.GZHID);
        params.put("mch_id", WeChatPayConstants.SHHID);

        if(!KSStringUtils.isEmpty(weChatOrderQueryRequest.getTransactionID())){
            params.put("transaction_id", weChatOrderQueryRequest.getTransactionID());
        }else if(!KSStringUtils.isEmpty(weChatOrderQueryRequest.getOutTradeNo())){
            params.put("out_trade_no", weChatOrderQueryRequest.getOutTradeNo());
        }

        String nonce_str = WeChatPayUtil.getRandomStringByLength(16);
        params.put("nonce_str", nonce_str);

        String mchKey = WeChatPayConstants.GZHAPIKEY.toString();

        try {
            String sign = WeChatPayUtil.generateSignature(params, mchKey, WeChatPayConstants.SignType.MD5);
            params.put("sign", sign);
            String requestXML = WeChatPayUtil.mapToXml(params);
            String responseXml = postData("https://" + WeChatPayConstants.DOMAIN_API + WeChatPayConstants.ORDERQUERY_URL_SUFFIX,
                    requestXML, null);
            Map map = WeChatPayUtil.xmlToMap(responseXml);

            String returnCode = (String)map.get("return_code");
            String resultCode = (String)map.get("result_code");
            if("SUCCESS".equals(returnCode) && "SUCCESS".equals(resultCode)) {
                response = ResponseBuilder.buildBaseResponse(SUCCESS);
                response.setData(map);//将成功信息返回
                String transactionId = (String)map.get("transaction_id");
                if(!KSHLUtils.isEmpty(transactionId)){
                    String outTradeNo = (String)map.get("out_trade_no");
                    Map payInfoMap = new HashedMap();
                    payInfoMap.put("out_trade_no",outTradeNo);
                    payInfoMap.put("trade_no",transactionId);
                    payDao.updatePayStatus(payInfoMap);
                }
            } else {
                logger.warn("[WeChatPayServiceImpl]weChatOrderQuery failed, transaction_id is {}, out_trade_no is {}, return_code is {}, result_code is {}", weChatOrderQueryRequest.getTransactionID(), weChatOrderQueryRequest.getOutTradeNo(), returnCode, resultCode);
                if("FAIL".equals(returnCode)) {
                    response = ResponseBuilder.buildBaseResponse(REQUEST_FAILED);
                } else {
                    String errorCode = (String)map.get("err_code");

                    if("ORDERNOTEXIST".equals(errorCode)) {//查询系统中不存在此交易订单号
                        response = ResponseBuilder.buildBaseResponse(WECHAT_ORDERQUERY_FAILED_ORDERNOTEXIST);
                    } else if ("SYSTEMERROR".equals(errorCode)) {//系统异常，请再调用发起查询
                        response = ResponseBuilder.buildBaseResponse(WECHAT_ORDERQUERY_FAILED_SYSTEMERROR);
                    } else {
                        response = ResponseBuilder.buildBaseResponse(WECHAT_PAY_FAILED_LOGICERROR);
                    }
                }
            }

            return response;
        } catch (Exception e) {
            response = ResponseBuilder.buildBaseResponse(INVALID_PARAM);
            return response;
        }
    }

    @Override
    public BaseResponse weChatRefund(WeChatRefundRequest weChatRefundRequest, HttpServletRequest request) {
        BaseResponse response = new BaseResponse();
        SortedMap<String, String> params = new TreeMap();
        params.put("appid", WeChatPayConstants.GZHID);
        params.put("mch_id", WeChatPayConstants.SHHID);
        params.put("nonce_str", WeChatPayUtil.getRandomStringByLength(16));
        String outTradeNo = weChatRefundRequest.getOutTradeNo();
        params.put("out_trade_no",outTradeNo);
        String outRefundNo= DateFormatUtil.getOrderIdByUUId();//商户退款单号
        params.put("out_refund_no", outRefundNo);
        String totalFee = WeChatPayConstants.getMoney(weChatRefundRequest.getTotalFee().toString());
        params.put("total_fee", totalFee);
        String refundFee = WeChatPayConstants.getMoney(weChatRefundRequest.getRefundFee().toString());
        params.put("refund_fee",refundFee);
        try{
            KeyStore keyStore = KeyStore.getInstance("PKCS12");
            HttpSession session = request.getSession();
            String realPath = session.getServletContext().getRealPath("") + "/" + "cert" + "/" + "apiclient_cert.p12";
            //String realPath = "D:\\cert\\apiclient_cert.p12";
            File f = new File(realPath);
            f.setExecutable(true);//设置可执行权限
            f.setReadable(true);//设置可读权限
            FileInputStream instream = new FileInputStream(f);
            try {
                keyStore.load(instream, WeChatPayConstants.SHHID.toCharArray());
            }finally {
                instream.close();
            }
            // Trust own CA and all self-signed certs
            SSLContext sslcontext = SSLContexts.custom().loadKeyMaterial(keyStore, WeChatPayConstants.SHHID.toCharArray()).build();
            // Allow TLSv1 protocol only
            SSLConnectionSocketFactory sslsf = new SSLConnectionSocketFactory(
                    sslcontext, new String[] { "TLSv1" }, null,
                    SSLConnectionSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);
            CloseableHttpClient httpclient = HttpClients.custom()
                    .setSSLSocketFactory(sslsf).build();
            HttpPost httppost = new HttpPost("https://api.mch.weixin.qq.com/secapi/pay/refund");
            String sign = WeChatPayUtil.generateSignature(params, WeChatPayConstants.GZHAPIKEY, WeChatPayConstants.SignType.MD5);
            params.put("sign",sign );
            String xml = WeChatPayUtil.mapToXml(params);
            try {
                StringEntity se = new StringEntity(xml);
                httppost.setEntity(se);
                System.out.println("executing request" + httppost.getRequestLine());
                CloseableHttpResponse responseEntry = httpclient.execute(httppost);
                try {
                    HttpEntity entity = responseEntry.getEntity();
                    System.out.println(responseEntry.getStatusLine());
                    if (entity != null) {
                        System.out.println("Response content length: "
                                + entity.getContentLength());
                        SAXReader saxReader = new SAXReader();
                        org.dom4j.Document document = saxReader.read(entity.getContent());
                        org.dom4j.Element rootElt = document.getRootElement();
                        System.out.println("根节点：" + rootElt.getName());
                        System.out.println("==="+rootElt.elementText("result_code"));
                        System.out.println("==="+rootElt.elementText("return_msg"));
                        String resultCode = rootElt.elementText("result_code");
                        JSONObject result = new JSONObject();

                        org.dom4j.Document documentXml = DocumentHelper.parseText(xml);
                        org.dom4j.Element rootEltXml = documentXml.getRootElement();
                        if(resultCode.equals("SUCCESS")){
                            System.out.println("=================prepay_id===================="+ rootElt.elementText("prepay_id"));
                            System.out.println("=================sign===================="+ rootEltXml.elementText("sign"));
                            result.put("weixinPayUrl", rootElt.elementText("code_url"));
                            result.put("prepayId", rootElt.elementText("prepay_id"));
                            result.put("status","success");
                            result.put("msg","success");
                            Payinfo payInfo = payDao.getByTradeNo(outTradeNo);
                            payInfo.setPaystatus(Constants.PAY_STATUS.REFUND);
                            payDao.updatePayInfo(payInfo);
                            logger.info("退款成功");
                        }else{
                            result.put("status","false");
                            result.put("msg",rootElt.elementText("err_code_des"));
                        }
                        response.setData(result);
                    }
                    EntityUtils.consume(entity);
                }
                finally {
                    responseEntry.close();
                }
            }
            finally {
                httpclient.close();
            }
            return response;
        }catch(Exception e){
            e.printStackTrace();
            JSONObject result = new JSONObject();
            result.put("status","error");
            result.put("msg",e.getMessage());
            response.setData(result);
        }
        return response;
    }

    @Override
    public BaseResponse weChatCloseOrder(WeChatCloseOrderRequest weChatCloseOrderRequest) {
        BaseResponse response;
        Map<String, String> params = new TreeMap<String, String>();
        params.put("appid", weChatCloseOrderRequest.getAppID());
        params.put("mch_id", weChatCloseOrderRequest.getMchID());
        String nonce_str = WeChatPayUtil.getRandomStringByLength(16);
        params.put("nonce_str", nonce_str);
        params.put("out_trade_no", weChatCloseOrderRequest.getOutTradeNo());
        String mchKey = weChatCloseOrderRequest.getMchKey();

        try {
            String sign = WeChatPayUtil.generateSignature(params, mchKey, WeChatPayConstants.SignType.MD5);
            params.put("sign", sign);
            String requestXML = WeChatPayUtil.mapToXml(params);
            String responseXml = postData("https://" + WeChatPayConstants.DOMAIN_API + WeChatPayConstants.CLOSEORDER_URL_SUFFIX,
                    requestXML, null);
            Map map = WeChatPayUtil.xmlToMap(responseXml);
            String returnCode = (String)map.get("return_code");
            String resultCode = (String)map.get("result_code");

            if("SUCCESS".equals(returnCode) && "SUCCESS".equals(resultCode)) {
                Payinfo payInfo = payDao.getByTradeNo(weChatCloseOrderRequest.getOutTradeNo());
                payInfo.setPaystatus(Constants.PAY_STATUS.REFUND);
                payDao.updatePayInfo(payInfo);
                logger.info("退款成功");
                response = ResponseBuilder.buildBaseResponse(SUCCESS);
                response.setData(map);//将成功信息返回
            } else {
                logger.info("退款失败");
                logger.warn("[WeChatPayServiceImpl]weChatCloseOrder failed, out_trade_no is {}, return_code is {}, result_code is {}", weChatCloseOrderRequest.getOutTradeNo(), returnCode, resultCode);
                if("FAIL".equals(returnCode)) {
                    response = ResponseBuilder.buildBaseResponse(REQUEST_FAILED);
                } else {
                    String errorCode = (String)map.get("err_code");

                    if("ORDERPAID".equals(errorCode)) {//订单已支付，不能发起关单
                        response = ResponseBuilder.buildBaseResponse(WECHAT_CLOSEORDER_FAILED_ORDERPAID);
                    } else if ("SYSTEMERROR".equals(errorCode)) {//系统错误
                        response = ResponseBuilder.buildBaseResponse(WECHAT_CLOSEORDER_FAILED_SYSTEMERROR);
                    } else if ("ORDERCLOSED".equals(errorCode)) {//订单已关闭，无法重复关闭
                        response = ResponseBuilder.buildBaseResponse(WECHAT_CLOSEORDER_FAILED_ORDERCLOSED);
                    } else {
                        response = ResponseBuilder.buildBaseResponse(WECHAT_PAY_FAILED_LOGICERROR);
                    }
                }
            }
            return response;
        } catch (Exception e) {
            response = ResponseBuilder.buildBaseResponse(INVALID_PARAM);
            return response;
        }
    }

    @Override
    public List<Payinfo> queryPayInfo(Map<String, Object> map) {
        return payDao.queryPayInfo(map);
    }

    @Override
    public String weChatNotifyUrl(HttpServletRequest request, HttpServletResponse response) {
        String out_trade_no = null;
        String return_code = null;
        try {
            InputStream inStream = request.getInputStream();
            ByteArrayOutputStream outSteam = new ByteArrayOutputStream();
            byte[] buffer = new byte[1024];
            int len = 0;
            while ((len = inStream.read(buffer)) != -1) {
                outSteam.write(buffer, 0, len);
            }
            outSteam.close();
            inStream.close();
            String resultStr = new String(outSteam.toByteArray(), "utf-8");
            logger.info("支付成功的回调：" + resultStr);
            Map<String, Object> resultMap = parseXmlToList(resultStr);
            String result_code = (String) resultMap.get("result_code");
            String appid = (String)resultMap.get("appid");
            String is_subscribe = (String) resultMap.get("is_subscribe");
            String transaction_id = (String) resultMap.get("transaction_id");
            String sign = (String) resultMap.get("sign");
            String time_end = (String) resultMap.get("time_end");
            String openid = (String)resultMap.get("openid");

            out_trade_no = (String) resultMap.get("out_trade_no");
            return_code = (String) resultMap.get("return_code");


            //通知微信.异步确认成功.必写.不然微信会一直通知后台.八次之后就认为交易失败了.
            response.getWriter().write(RequestHandler.setXML("SUCCESS", ""));

            if (return_code.equals("SUCCESS")) {
                if("SUCCESS".equals(result_code) && WeChatPayConstants.GZHID.equals(appid)) {
                    Map<String, Object> map = new HashMap<String, Object>();
                    map.put("out_trade_no", out_trade_no);
                    map.put("userid", openid);
                    List<Payinfo> list = payDao.queryPayInfo(map);
                    if (KSHLUtils.isNotEmpty(list)) {
                        Payinfo info = list.get(0);
                        if(info.getPaystatus() == WeChatPayConstants.PAY_STATUS.PAYSTATUS_NOTPAY) {
                            map.put("payStatus", WeChatPayConstants.PAY_STATUS.PAYSTATUS_PAY);
                            payDao.updatePayStatus(map);
                        }
                    }else{

                    }
                }
                //支付成功的业务逻辑
            } else {
                //支付失败的业务逻辑
            }
        } catch (Exception e) {
            logger.error("微信回调接口出现错误：", e);
            try {
                response.getWriter().write(RequestHandler.setXML("FAIL", "error"));
            } catch (IOException e1) {
                e1.printStackTrace();
            }
        }
        return null;
    }

    /**
     * description: 解析微信通知xml
     *
     * @param xml
     * @return
     * @author ex_yangxiaoyi
     * @see
     */
    private static Map parseXmlToList(String xml) {
        Map retMap = new HashMap();
        try {
            StringReader read = new StringReader(xml);
            // 创建新的输入源SAX 解析器将使用 InputSource 对象来确定如何读取 XML 输入
            InputSource source = new InputSource(read);
            // 创建一个新的SAXBuilder
            SAXBuilder sb = new SAXBuilder();
            // 通过输入源构造一个Document
            Document doc = (Document) sb.build(source);
            Element root = doc.getRootElement();// 指向根节点
            List<Element> es = root.getChildren();
            if (es != null && es.size() != 0) {
                for (Element element : es) {
                    retMap.put(element.getName(), element.getValue());
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return retMap;
    }

    @Override
    public void updatePayStatus(Map<String, Object> map) {
        payDao.updatePayStatus(map);
    }

    @Override
    public BaseResponse weChatUnifiedOrder(WeChatUnifiedOrderRequest weChatUnifiedOrderRequest, HttpSession session, HttpServletRequest request){
        BaseResponse response;
        Map<String, String> params = new TreeMap<String, String>();
        params.put("appid", weChatUnifiedOrderRequest.getAppID());
        params.put("mch_id", weChatUnifiedOrderRequest.getMchID());
        String nonce_str = WeChatPayUtil.getRandomStringByLength(16);
        params.put("nonce_str", nonce_str);
        params.put("body", weChatUnifiedOrderRequest.getProductName());
        params.put("out_trade_no", weChatUnifiedOrderRequest.getOutTradeNo());
        //金额转化为分为单位
        String finalmoney = WeChatPayConstants.getMoney(weChatUnifiedOrderRequest.getTotalFee().toString());
        params.put("total_fee", finalmoney);
        params.put("spbill_create_ip", request.getRemoteAddr());
        params.put("notify_url", WeChatPayConstants.NOTIFY_URL);//http://www.keslink.cn/Council/wechatPay
        params.put("trade_type", weChatUnifiedOrderRequest.getTradeType());

        if(WeChatPayConstants.TRADE_TYPE_NATIVE.equals(weChatUnifiedOrderRequest.getTradeType())){
            params.put("product_id", weChatUnifiedOrderRequest.getProductId());
        }else if(WeChatPayConstants.TRADE_TYPE_JSAPI.equals(weChatUnifiedOrderRequest.getTradeType())){
            Object openid = session.getAttribute("openid");
            params.put("openid", openid.toString());
        }

        String mchKey = weChatUnifiedOrderRequest.getMchKey();

        try {
            String sign = WeChatPayUtil.generateSignature(params, mchKey, WeChatPayConstants.SignType.MD5);
            params.put("sign", sign);
            String requestXML = WeChatPayUtil.mapToXml(params);
            String responseXml = postData("https://" + WeChatPayConstants.DOMAIN_API + WeChatPayConstants.UNIFIEDORDER_URL_SUFFIX,
                    requestXML, null);
            Map map = WeChatPayUtil.xmlToMap(responseXml);
            String returnCode = (String)map.get("return_code");
            String resultCode = (String)map.get("result_code");

            if("SUCCESS".equals(returnCode) && "SUCCESS".equals(resultCode)) {
                Payinfo payInfo = new Payinfo();
                Object object = session.getAttribute("userInfo");
                if (!KSStringUtils.isEmpty(object)) {
                    UserInfo userInfo = (UserInfo)object;
                    payInfo.setUserid(userInfo.getUserId().toString());
                    payInfo.setPhone(userInfo.getPhoneNumber());
                }
                payInfo.setBody("慧慧商品");
                payInfo.setOutTradeNo(weChatUnifiedOrderRequest.getOutTradeNo());
                payInfo.setPaytime(new Date());
                payInfo.setPaystatus(Constants.PAY_STATUS.NOT_PAY);
                payInfo.setPaytype(Constants.PAY_TYPE.WECHAT_PAY);
                payInfo.setMoney(weChatUnifiedOrderRequest.getTotalFee());
                payDao.addPayInfo(payInfo);
                response = ResponseBuilder.buildBaseResponse(SUCCESS);
                if(WeChatPayConstants.TRADE_TYPE_NATIVE.equals(weChatUnifiedOrderRequest.getTradeType())){
                    String codeUrl = (String) map.get("code_url");
                    if(codeUrl != null){//生成二维码
                        String qrcodePath = createQRCode(weChatUnifiedOrderRequest.getOutTradeNo(), codeUrl, session);
                        qrcodePath = qrcodePath.replaceAll("\\\\", "/");
                        qrcodePath = FileUploadUtil.GetImageStr(qrcodePath);
                        map.put("qrcode_path", qrcodePath);
                    }
                }
                map.put("timeStamp", PayUtil.getTimeStamp());
                response.setData(map);//将成功信息返回
            } else {
                logger.warn("[WeChatPayServiceImpl]weChatUnifiedOrder failed, out_trade_no is {}, return_code is {}, result_code is {}", weChatUnifiedOrderRequest.getOutTradeNo(), returnCode, resultCode);
                if("FAIL".equals(returnCode)) {
                    response = ResponseBuilder.buildBaseResponse(REQUEST_FAILED);
                } else {
                    String errorCode = (String)map.get("err_code");

                    if("NOAUTH".equals(errorCode)) {//商户未开通此接口权限
                        response = ResponseBuilder.buildBaseResponse(WECHAT_PAY_FAILED_NOAUTH);
                    } else if ("NOTENOUGH".equals(errorCode)) {//用户帐号余额不足，请用户充值或更换支付卡后再支付
                        response = ResponseBuilder.buildBaseResponse(WECHAT_PAY_FAILED_NOTENOUGH);
                    } else if ("ORDERPAID".equals(errorCode)) {//商户订单已支付，无需更多操作
                        response = ResponseBuilder.buildBaseResponse(WECHAT_PAY_FAILED_ORDERPAID);
                    } else if ("ORDERCLOSED".equals(errorCode)) {//当前订单已关闭，请重新下单
                        response = ResponseBuilder.buildBaseResponse(WECHAT_PAY_FAILED_ORDERCLOSED);
                    } else if ("SYSTEMERROR".equals(errorCode)) {//请系统异常，请用相同参数重新调用
                        response = ResponseBuilder.buildBaseResponse(WECHAT_PAY_FAILED_SYSTEMERROR);
                    } else if ("OUT_TRADE_NO_USED".equals(errorCode)) {//请核实商户订单号是否重复提交
                        response = ResponseBuilder.buildBaseResponse(WECHAT_PAY_FAILED_OUT_TRADE_NO_USED);
                    } else {
                        response = ResponseBuilder.buildBaseResponse(WECHAT_PAY_FAILED_LOGICERROR);
                    }
                }
            }
            return response;
        } catch (Exception e) {
            response = ResponseBuilder.buildBaseResponse(INVALID_PARAM);
            return response;
        }
    }

    private String createQRCode(String saveFileName, String codeUrl, HttpSession session){
        int width = 150;
        int height = 150;
        String format = "png";
        Hashtable hints = new Hashtable();
        hints.put(EncodeHintType.CHARACTER_SET, "utf-8");
        hints.put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.M);
        hints.put(EncodeHintType.MARGIN, 2);

        String realPath = session.getServletContext().getRealPath("");
        String fullFileName = FileUtils.getFullSavePath(realPath, WeChatPayConstants.PATH_WECHAT + "/qrcode") + saveFileName;

        try {
            File f = new File(fullFileName);
            f.setExecutable(true);//设置可执行权限
            f.setReadable(true);//设置可读权限
            f.setWritable(true);//设置可写权限
            BitMatrix bitMatrix = new MultiFormatWriter().encode(codeUrl, BarcodeFormat.QR_CODE, width, height, hints);
            Path file = new File(fullFileName).toPath();
            MatrixToImageWriter.writeToPath(bitMatrix, format, file);
        } catch (WriterException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return fullFileName;
    }

    private String postData(String urlStr, String data, String contentType){
        BufferedReader reader = null;
        try {
            URL url = new URL(urlStr);
            URLConnection conn = url.openConnection();
            conn.setDoOutput(true);
            conn.setConnectTimeout(5000);
            conn.setReadTimeout(5000);
            if(contentType != null){
                conn.setRequestProperty("content-type", contentType);
            }
            OutputStreamWriter writer = new OutputStreamWriter(conn.getOutputStream(), "utf-8");
            if(data == null){
                data = "";
            }
            writer.write(data);
            writer.flush();
            writer.close();

            reader = new BufferedReader(new InputStreamReader(conn.getInputStream(), "utf-8"));
            StringBuilder sb = new StringBuilder();
            String line = null;
            while ((line = reader.readLine()) != null) {
                sb.append(line);
                sb.append("\r\n");
            }
            return sb.toString();
        } catch (IOException e) {
//            logger.error("Error connecting to " + urlStr + ": " + e.getMessage());
        } finally {
            try {
                if (reader != null)
                    reader.close();
            } catch (IOException e) {
            }
        }
        return null;
    }

}
